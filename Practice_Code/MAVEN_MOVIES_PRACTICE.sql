
USE MAVENMOVIES;

SELECT count(RENTAL_DATE)
FROM RENTAL;

SELECT SUM(AMOUNT) AS REVENUE
FROM PAYMENT;

SELECT ROUND(AVG(AMOUNT),2) AS AVG_RENTAL
FROM PAYMENT;

SELECT MAX(AMOUNT) AS REVENUE
FROM PAYMENT;

SELECT MIN(AMOUNT) AS REVENUE
FROM PAYMENT;

SELECT *
FROM PAYMENT
WHERE AMOUNT = 0;

SELECT RENTAL_ID,PAYMENT_ID,PAYMENT_DATE,AMOUNT
FROM PAYMENT;

SELECT PAYMENT_DATE,RENTAL_ID,PAYMENT_ID,PAYMENT_DATE,AMOUNT,CUSTOMER_ID,STAFF_ID,LAST_UPDATE
FROM PAYMENT;

SELECT * 
FROM PAYMENT
ORDER BY PAYMENT_DATE DESC
LIMIT 10;

SELECT * 
FROM PAYMENT
LIMIT 10 OFFSET 5;

SELECT (CONCAT(LEFT(FIRST_NAME,1),LOWER(SUBSTRING(FIRST_NAME,2))," ",LAST_NAME)) AS FULL_NAME, LOWER(EMAIL)
FROM CUSTOMER;

SELECT SUBSTRING(FIRST_NAME,2,2) FROM CUSTOMER;

SELECT (CONCAT(LEFT(FIRST_NAME,1),LOWER(SUBSTRING(FIRST_NAME,2))," ",LEFT(LAST_NAME,1),LOWER(SUBSTRING(LAST_NAME,2)))) AS FULL_NAME, 
LOWER(EMAIL) AS EMAIL_ID
FROM CUSTOMER;

-- CREATE A REPORT OF CUSTOMER ID 9 HAS EVER PURCHASED
SELECT *
FROM RENTAL
WHERE CUSTOMER_ID = 9;

-- CREATE A REPORT OF CUSTOMER ID 9 AND 10 HAS EVER PURCHASED
SELECT *
FROM RENTAL
WHERE CUSTOMER_ID = 9 OR CUSTOMER_ID = 10;

-- CREATE A REPORT OF CUSTOMER ID 9,10,11 HAS EVER PURCHASED

SELECT *
FROM RENTAL
WHERE CUSTOMER_ID = 9 OR CUSTOMER_ID = 10 OR CUSTOMER_ID = 11;

SELECT *
FROM RENTAL
WHERE CUSTOMER_ID IN (9,10,11);

SELECT *
FROM RENTAL
WHERE CUSTOMER_ID >= 9 AND CUSTOMER_ID <=11;

SELECT *
FROM RENTAL
WHERE CUSTOMER_ID BETWEEN 9 AND 11;

SELECT *
FROM FILM
WHERE SPECIAL_FEATURES = "Deleted Scenes";

SELECT *
FROM FILM
WHERE SPECIAL_FEATURES LIKE "%Deleted Scenes%";

-- 1. % - stands for 0 or more characters
-- 2. _ (underscore) - stands for 1 and only 1 character

-- Examples
-- LIKE “a%” - any length string starting with “a”
-- LIKE “%a” - anything length string with ends with “a”
-- LIKE “%em%” - any string with “em” in between, will match “em” also
-- LIKE “a_” - Any string with length 2 and starting from “a”
-- LIKE “a_%” - A string with starts from “a” and at least is 2 character long

SELECT *
FROM FILM
WHERE RATING LIKE "P%";

SELECT *
FROM ADDRESS
WHERE ADDRESS2 IS NULL OR TRIM(ADDRESS2) = "";

SELECT CITY_ID
FROM CITY
WHERE COUNTRY_ID = 44;

SELECT *
FROM ADDRESS
WHERE CITY_ID IN (SELECT CITY_ID
FROM CITY
WHERE COUNTRY_ID = 44);

-- SUBQUERIES

-- we want addresses of Indian Cities

SELECT *
FROM COUNTRY
WHERE COUNTRY = "India";

SELECT CITY_ID
FROM CITY
WHERE COUNTRY_ID = 44;

SELECT *
FROM ADDRESS
WHERE CITY_ID IN (SELECT CITY_ID
FROM CITY
WHERE COUNTRY_ID = 44);

SELECT *
FROM RENTAL;

SELECT *
FROM CUSTOMER
where address_id in (SELECT address_id
FROM ADDRESS
WHERE DISTRICT = "California");

SELECT address_id
FROM ADDRESS
WHERE DISTRICT = "California";

-- provide a list of customers staying in california district for offers

SELECT *
FROM ADDRESS
WHERE DISTRICT = "California";

-- CATEGORIZE MOVIES AS PER LENGTH

SELECT FILM_ID,TITLE,LENGTH,
CASE
	WHEN LENGTH < 60 THEN "UNDER 1 HR"
    WHEN LENGTH BETWEEN 60 AND 90 THEN "1 TO 1.5 HRS"
    WHEN LENGTH > 90 THEN "LONG MOVIES"
    ELSE "ERROR"
END AS LENGTH_BUCKET
FROM FILM;

SELECT FILM_ID,TITLE,LENGTH,IF(LENGTH < 60,"SHORT_FILM","LONG_FILM") AS FILM_LENGTH_CAT
FROM FILM;

SELECT FILM_ID,TITLE,LENGTH,
CASE
	WHEN LENGTH < 60 THEN "SHORT_FILM"
    ELSE "LONG_FILM"
END AS LENGTH_BUCKET
FROM FILM;

-- CATEGORIZING MOVIES TO RECOMMEND VARIOUS AGE GROUPS AND DEMOGRAPHIC

SELECT TITLE,DESCRIPTION,RENTAL_DURATION,RENTAL_RATE,LENGTH,RATING,
CASE
	WHEN RENTAL_DURATION <= 4 THEN "RENTAL TOO SHORT"
    WHEN RENTAL_RATE >= 3.99 THEN "TOO EXPENSIVE"
    WHEN RATING IN ("NC-17","R") THEN "TOO ADULT"
    WHEN LENGTH NOT BETWEEN 60 AND 90 THEN "TOO SHORT OR TOO LONG"
    WHEN DESCRIPTION LIKE "%Shark%" then "NO_NO_HAS_SHARKS"
    ELSE "GREAT RECOMMENDATION FOR CHILDREN"
END AS FIT_FOR_RECOMMENDATION
FROM FILM;

SELECT * FROM ACTOR_AWARD;

SELECT *
FROM CITY;

SELECT *
FROM ADDRESS;

-- I WANT THE FULL ADDRESS TO SEND PARCELS

SELECT *
FROM ADDRESS LEFT JOIN CITY
ON ADDRESS.CITY_ID = CITY.CITY_ID;

SELECT C.CITY_ID,C.CITY,CO.COUNTRY
FROM CITY AS C LEFT JOIN COUNTRY AS CO
ON C.COUNTRY_ID = CO.COUNTRY_ID;

SELECT *
FROM COUNTRY;


SELECT C.*,CO.COUNTRY
FROM CITY AS C LEFT JOIN COUNTRY AS CO
ON C.COUNTRY_ID = CO.COUNTRY_ID;

-- “We will be hosting a meeting with all of our staff and advisors soon. Could you pull one list of all staff
-- and advisor names, and include a column noting whether they are a staff member or advisor? Thanks!”

(SELECT FIRST_NAME,LAST_NAME,"STAFF MEMBER" AS DESGINATION
FROM STAFF

UNION

SELECT FIRST_NAME,LAST_NAME,"ADVISOR" AS DESGINATION
FROM ADVISOR);


-- on each date, get the list of customers who rented

SELECT *,EXTRACT(YEAR_MONTH FROM RENTAL_DATE),DATE(RENTAL_DATE)
FROM RENTAL;


SELECT DATE(RENTAL_DATE) AS DATE_OF_RENTAL,CUSTOMER_ID
FROM RENTAL
GROUP BY DATE(RENTAL_DATE),CUSTOMER_ID;

-- GET THE LIST OF TOP 10 CUSTOMERS BASED ON REVENUE

SELECT CUSTOMER_ID,SUM(AMOUNT) AS REVENUE
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY REVENUE DESC
LIMIT 10;


SELECT CUSTOMER_ID
FROM (SELECT CUSTOMER_ID,SUM(AMOUNT) AS REVENUE
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY REVENUE DESC
LIMIT 10) AS X;

SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID
FROM (SELECT CUSTOMER_ID,SUM(AMOUNT) AS REVENUE
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY REVENUE DESC
LIMIT 10) AS X);

SELECT P.CUSTOMER_ID,SUM(P.AMOUNT) AS REVENUE, C.FIRST_NAME,C.LAST_NAME, C.EMAIL
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY P.CUSTOMER_ID
ORDER BY REVENUE DESC
LIMIT 10;

-- I WANT THE LIST OF CUSTOMERS WHO HAVE TOTAL PURCHASE MORE THAN $200

SELECT P.CUSTOMER_ID,SUM(P.AMOUNT) AS REVENUE, C.FIRST_NAME,C.LAST_NAME, C.EMAIL
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY P.CUSTOMER_ID
HAVING REVENUE > 200;


-- “I’d like to talk to customers that have not rented much from us to understand if there is something
-- we could be doing better. Could you pull a list of customer_ids with less than 15 rentals all-time?”


SELECT CUSTOMER_ID, COUNT(*) AS TOTAL_RENTALS
FROM RENTAL
GROUP BY CUSTOMER_ID
HAVING TOTAL_RENTALS < 15;

-- CUSTOMERS WHO HAVE RENTED MORE THAN 30 TIMES

SELECT CUSTOMER_ID, COUNT(*) AS TOTAL_RENTALS
FROM RENTAL
GROUP BY CUSTOMER_ID
HAVING TOTAL_RENTALS > 40;

-- CALCULATE REVENUE OF EACH CUSTOMER AND DISPLAY % CONTRIBUTION OF EACH TRANSACTION TO THE TOTAL REVENUE OF CUSTOMER

SELECT *,(AMOUNT/REVENUE_PER_CUSTOMER) *100 AS PERCENT_CONTRI
FROM (SELECT *,SUM(AMOUNT) OVER (PARTITION BY CUSTOMER_ID) AS REVENUE_PER_CUSTOMER
FROM PAYMENT) AS Y;

SELECT *
FROM PAYMENT
GROUP BY CUSTOMER_ID;

SELECT *
FROM (SELECT *,AVG(AMOUNT) OVER (PARTITION BY CUSTOMER_ID) AS AVG_OF_EACH_CUSTOMER
FROM PAYMENT) AS Z
WHERE AMOUNT > AVG_OF_EACH_CUSTOMER;

SELECT CUSTOMER_ID,MAX(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY MAX(AMOUNT) DESC;


SELECT *
FROM (SELECT *,MAX(AMOUNT) OVER (PARTITION BY CUSTOMER_ID ORDER BY AMOUNT DESC) AS MAXIMUM_SPENT
FROM PAYMENT) AS A
WHERE AMOUNT = MAXIMUM_SPENT;

SELECT *
FROM (SELECT *,ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY AMOUNT DESC) AS RANKING_BASED_ON_ROWS
FROM PAYMENT) AS G
WHERE RANKING_BASED_ON_ROWS = 1;

SELECT *,DENSE_RANK() OVER (PARTITION BY CUSTOMER_ID ORDER BY AMOUNT DESC) AS RANKING_BASED_ON_ROWS
FROM PAYMENT;

SELECT *,RANK() OVER (PARTITION BY CUSTOMER_ID ORDER BY AMOUNT DESC) AS RANKING_BASED_ON_ROWS
FROM PAYMENT;

SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT;


WITH REVENUE_TABLE AS (SELECT P.*,C.STORE_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,C.ADDRESS_ID,C.ACTIVE
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID)
SELECT *
FROM REVENUE_TABLE;

WITH REVENUE_TABLE AS (SELECT P.*,C.STORE_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,C.ADDRESS_ID,C.ACTIVE
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID)
SELECT *
FROM REVENUE_TABLE
WHERE AMOUNT > 10;

WITH REVENUE_TABLE AS (SELECT P.*,C.STORE_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,C.ADDRESS_ID,C.ACTIVE
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID)
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,SUM(AMOUNT)
FROM REVENUE_TABLE
GROUP BY CUSTOMER_ID;

-- SELECT * FROM REVENUE_TABLE;

CREATE VIEW  REVENUE_TABLE1 AS
(SELECT P.*,C.STORE_ID,C.FIRST_NAME,C.LAST_NAME,C.EMAIL,C.ADDRESS_ID,C.ACTIVE
FROM PAYMENT AS P INNER JOIN CUSTOMER AS C
ON P.CUSTOMER_ID = C.CUSTOMER_ID);


SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,EMAIL,SUM(AMOUNT)
FROM REVENUE_TABLE1
GROUP BY CUSTOMER_ID;


SELECT *,DATE_ADD(PAYMENT_DATE,INTERVAL 1 WEEK)
FROM (SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT) AS x;

SELECT *,DATE_SUB(PAYMENT_DATE,INTERVAL 1 WEEK)
FROM (SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT) AS x;

SELECT *,DATEDIFF(LAST_UPDATE,PAYMENT_DATE)
FROM (SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT) AS x;

SELECT *,LEAD(RENTAL_ID,1) OVER (ORDER BY RENTAL_ID)
FROM (SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT) AS x;

SELECT *
FROM (SELECT *,DATE_FORMAT(PAYMENT_DATE,"%W") as day_name,DATE_FORMAT(PAYMENT_DATE,"%M")
FROM PAYMENT) AS x
WHERE RENTAL_ID IS NOT NULL;

